

#include <stdio.h>
#include "platform.h"
#include "xaxidma.h"
#include "xdohist.h"
#include "xdocontrast.h"
#include "xtmrctr.h"


#define SIZE_ARR (320*240)

//MEMORY USED BY DMA
#define MEM_BASE_ADDR 0x01000000
#define TX_BUFFER_BASE (MEM_BASE_ADDR + 0x00100000)
#define RX_BUFFER_BASE (MEM_BASE_ADDR + 0x00300000)
//get a pointer to the TX and RX dma buffer (confiure DMA)
//the pointers are for 8-bit memory but theor addresses are 32 bit (u32)
unsigned char *m_dma_buffer_TX= (unsigned char*)TX_BUFFER_BASE;
unsigned char *m_dma_buffer_RX= (unsigned char*)RX_BUFFER_BASE;

unsigned int hist_sw[256];
unsigned char imgOut[SIZE_ARR];
unsigned char imgIn_HW[SIZE_ARR];

//address of BRAM controller in memory
unsigned int *hist_hw=(unsigned int *) 0x40000000;
XaxiDma axiDma;

int initDma()
{
	XAxiDma_Config *CfgPtr;
	CfgPtr=XAxiDma_LookupConfig(XPAR_AXI_DMA_0_DEVICE_ID);
	XAxiDma_CfgInitialize(&axiDma,CfgPtr);

	//Disable Interrupts
	XAxiDma_IntrDisable(&axiDma,XAXIDMA_IRQ_ALL_MASK,XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&axiDma,XAXIDMA_IRQ_ALL_MASK,XAXIDMA_DMA_TO_DEVICE);

	return XST_SUCCESS;

}

int initDoHistStretch()
{
	int status;

	XDocontrast_Config *doHistStretch_cfg;
	doHistStretch_cfg=XDocontrast_LookupConfig(XPAR_AXI_DOCONTRAST_0_DEVICE_ID);
	if(!doHistStretch_cfg)
	{
		printf("Error loading config for DOCNGTRAST\n");
	}

	status=XDocontrast_CfgInitialize(&doHistStretch,doHistStretch_cfg);
	if(status!=XST_SUCCESS)
	{
		printf("Error INITIALIAZING config for docntrast\n");
	}
	return status;
}

int initDoHist()
{
	int status;

	XDohist_Config *doHist_cfg;
	doHist_cfg=XDohist_LookupConfig(XPAR_AXI_DOHIST_0_DEVICE_ID);
	if(!doHist_cfg)
	{
		printf("Error loading config for dohist");
	}

	status=XDocontrast_CfgInitialize(&doHist,doHist_cfg);
	if(status!=XST_SUCCESS)
	{
		printf("Error INITIALIAZING config for dohist\n");
	}
	return status;
}


void doHistSW(unsigned char *img, unsigned int *hist)
{
	//reset histogram
	for(int idx=0; idx<256;idx++)
	{
		hist[idx]=0;
	}

	//calculate the histogram
	for(int idxImg=0; idxImg<(320*240);idxImg++)
	{
		hist[img[idxImg]]=hist[img[idxImg]]+1;
	}

}

void doHistStretchSW(unsigned char *imgIn, unsigned char *imgOut, unsigned char xMin, unsigned char xMax)
{
	float xMax_minus_xMin=xMax-xMin;
	for(int idxImg=0;idxImg<(320*240);idxImg++)
	{
		//calculate the histogram stretch
		float y_t_float=((imgIn[idxImg]-xMin)/(xMax_minus_xMin))*255;
		imgOut[idxImg]=y_t_float;

	}

}


int main()
{
    init_platform();

    print("Hello World\n\r");
    print("Successfully ran Hello World application");
    cleanup_platform();
    return 0;
}
